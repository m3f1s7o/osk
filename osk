#! /bin/bash

# Seeks the description of the given command options

usage () {
	echo "Usage: $(basename $0) [-lsh] 'command -x'" 2>&1
	echo "Seek information about command options"
	echo
	echo " -l long answer"
	echo " -s short answer (default)"
	echo " -h display this message"
}

#######################################
# Seeks the option description using --help o -h
# Globals:
#   COMMAND
# Arguments:
#   option
# Returns:
# 	Command description in short format
#######################################
seek_short () {
	local option
	option=$2

	if [[ $1 == "help" ]]; then
		$COMMAND --help 2>/dev/null | grep -P "^[ ]+$option"
	elif [[ $1 == "h" ]]; then
		$COMMAND -h 2>/dev/null | grep -P "^[ ]+$option"
	fi
}

#######################################
# Seeks the option description using man pages
# Globals:
#   COMMAND
# Arguments:
#   option
# Returns:
# 	Command description in large format
#######################################
seek_long () {
	local option
	option=$1

	# if the man page of the command has a OPTION section, use it as beginning
	# of the search, otherwise use DESCRIPTION
	man $COMMAND | grep -P "^OPTIONS$" &>/dev/null
	if [[ $? -eq 0 ]]; then
		ceil="OPTIONS"
	else
		ceil="DESCRIPTION"
	fi

	# Gets the end of the wanted_section selection wherein the search
	# is going to be
	floor=$(man $COMMAND \
	  | grep -P "^[A-Z ]+$" \
	  | grep $ceil -A 1 \
	  | tail -n 1 | xargs)

	# Extract from the man page only the section that contains the options
	# descriptions then chops it leaving at the top the option passed
	# and removes the last line that contains the following option
	wanted_section=$(man $COMMAND \
	  | awk "/^$ceil$/,/^$floor$/" \
	  | awk "/^[ ]+$option/,/^$floor/" \
	  | head -n -1)

	# Gets the minimum identation, that is the identation of the current option,
	# in order to get all its description. A smaller identation means a 
	# description of something else
	# NOT WORKED:
	#   1. tried to get the description by delimiting by opitions
	#     (as with ceil and floor) but with some options it did't work properly
	min_identation=$(printf "%s" "$wanted_section" \
	  | grep -P "^[ ]+$option" \
	  | head -n 1 \
	  | tr " " "*" \
	  | cut -d "-" -f 1 \
	  | wc -c)

	description=$(head -n 1 <<< $wanted_section)
	end=""
	# Go line by line checking identation
	while IFS= read -r line; do
		ident=0
		# Replaces spaces by * in order to count them and get the line's identation
		modified_line=$(tr " " "*" <<< $line)
		for (( i=0; i<${#modified_line}; i++ )); do
			# Only count the * that represent identation
			{ [[ "${modified_line:$i:1}" == "*" ]] && ((ident+=1)); } || break
		done

		# Finds the end of the description by finding the line in which the
		# identation is smaller than the min_identation
		# If it's an empty line does not count it, but don't take as end either
		if [[ $ident -gt $min_identation ]]; then
			end=$(sed 's/[-.\\\[{}()*+?\\^$|\/#]/\\&/g' <<< $line)
		elif [[ $ident -eq 0 ]]; then
			continue
		else
			break
		fi
	done <<< "$(tail -n +2 <<< $wanted_section)"  # pass each line but the wanted option
	man $COMMAND | awk "/^[ ]+$option/, /$end/"
}


###############################################################################
# Body
###############################################################################

if [[ ${#} -eq 0 ]]; then
	usage
	exit 1
fi

optstring=":lsh"
# Three possible options for LONG_OPT:
# true (-l) -> seeks given options within manual pages
# false (-s) -> seeks given options using --help or -h (if the first one fails)
#   of the specified command
# both (default) -> first seeks using --help, if it fails, it uses -h,
#   if it also fails, tries with man
LONG_OPT='both'

while getopts ${optstring} arg; do
	case ${arg} in
		l)
			LONG_OPT='true'
			;;
		s) 
			LONG_OPT='false'
			;;
		h)
			usage
			exit 0
			;;
		?)
			echo "Invalid option: -${OPTARG}."
			echo
			usage
			exit 1
			;;
	esac
done

shift $((OPTIND - 1))  # ${@} contains the non-option arg
COMMAND=$1
# gets each option passed with dashed scaped \-
read -ra options <<< $(sed "s/\-/\\\-/g" <<< ${@:2})
#echo "command: $COMMAND, options: ${options[@]}"

# ---
# Seeks all the options
# ---
# TODO: change tests cases for conditionals
for option in ${options[@]}; do
	if [[ $LONG_OPT == "false" ]] || [[ $LONG_OPT == "both" ]]; then
		help_output=$(seek_short "help" "$option")
		if [[ -z $help_output ]]; then
			h_output=$(seek_short "h" "$option")
			# if empty $h_output when short option, exit 2
			# if $h_output not empty and $LONG_OPT is both, echo $h_output
			# else, do nothing and let the program go to seek using man
			{ [[ -z $h_output ]] && [[ "$LONG_OPT" == "false" ]] && echo "No information available" && exit 2; } || { [["$LONG_OPT" == "both" ]] && printf "%s" "$h_output" && echo && exit 0; }
		else
			printf "%s" "$help_output"
			echo 
		fi
	elif [[ $LONG_OPT == "true" ]] || [[ $LONG_OPT == "both" ]]; then
		man_output=$(seek_long $option)
		{ [[ -z $man_output ]] && echo "No information available" && exit 2; } || { printf "%s" "$man_output" && echo && exit 0; }
	fi
done
